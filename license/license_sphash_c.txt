A C version of Bob Jenkins' spooky hash
Spooky Hash
A 128-bit noncryptographic hash, for checksums and table lookup
By Bob Jenkins. Bob's version was under Public Domain
The C version is under the BSD license
* Copyright (c) 2014, Spooky Contributors
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice,
* this list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright
* notice, this list of conditions and the following disclaimer in the
* documentation and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
* FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
* COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
* OF THE POSSIBILITY OF SUCH DAMAGE.
  Oct 31 2010: published framework, disclaimer ShortHash isn't right
  Nov 7 2010: disabled ShortHash
  Oct 11 2011: C version ported by Andi Kleen (andikleen@github)
  Oct 31 2011: replace End, ShortMix, ShortEnd, enable ShortHash again
  Apr 10 2012: buffer overflow on platforms without unaligned reads
  Apr 27 2012: C version updated by Ziga Zupanec ziga.zupanec@gmail.com (agiz@github)

  Assumes little endian ness. Caller has to check this case.
Up to 3 bytes/cycle for long messages.  Reasonably fast for short messages.
All 1 or 2 bit deltas achieve avalanche within 1% bias per output bit.

This was developed for and tested on 64-bit x86-compatible processors.
It assumes the processor is little-endian.  There is a macro
controlling whether unaligned reads are allowed (by default they are).
This should be an equally good hash on big-endian machines, but it will
compute different results on them than on little-endian machines.

Google's CityHash has similar specs to SpookyHash, and CityHash is faster
on some platforms.  MD4 and MD5 also have similar specs, but they are orders
of magnitude slower.  CRCs are two or more times slower, but unlike
SpookyHash, they have nice math for combining the CRCs of pieces to form
the CRCs of wholes.  There are also cryptographic hashes, but those are even
slower than MD5.
